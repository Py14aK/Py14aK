Some fun rotations

proc iml;
	/* Rotate a vector by a counterclockwise angle in a coordinate plane.
	[ 1    0       0   ]
	Rx = [ 0  cos(a) -sin(a)]        ==> Rotate in the (y,z)-plane
	[ 0  sin(a)  cos(a)]
	
	[ cos(a)  0   -sin(a)]
	Ry = [   0     1      0   ]      ==> Rotate in the (x,z)-plane
	[ sin(a)  0    cos(a)]
	
	[ cos(a) -sin(a) 0]
	Rz = [ sin(a)  cos(a) 0]         ==> Rotate in the (x,y)-plane
	[   0       0    1]
	*/
	start RotPlane(a, i, j);
	R=I(3);
	c=cos(a);
	s=sin(a);
	R[i, i]=c;
	R[i, j]=-s;
	R[j, i]=s;
	R[j, j]=c;
	return R;
	finish;
	start Rot3D(a, axis);

	/* rotation in plane perpendicular to axis */
	if upcase(axis)="X" then
		return RotPlane(a, 2, 3);
	else if upcase(axis)="Y" then
		return RotPlane(a, 1, 3);
	else if upcase(axis)="Z" then
		return RotPlane(a, 1, 2);
	else
		return I(3);
	finish;
	store module=(RotPlane Rot3D);
	quit;

data MyData;
	/* define points on coordinate axes */
	x=0;
	y=0;
	z=0;
	Axis="O";
	output;

	/* origin */
	Axis="X";

	do x=0.1 to 1000 by 1;

		/* points along unit vector in x direction */
		output;
	end;
	x=0;
	Axis="Y";

	do y=0.1 to 1000 by 1;

		/* points along unit vector in y direction */
		output;
	end;
	y=0;
	Axis="Z";

	do z=0.1 to 1000 by 1;

		/* points along unit vector in z direction */
		output;
	end;
run;

proc sgscatter data=Mydata;
	matrix X Y Z;
run;

proc iml;
	/* choose any 3D projection matrix as product of rotations */
	load module=Rot3D;
	pi=constant('pi');
	Rz=Rot3D(-pi/6, "Z");

	/* rotation matrix for (x,y) plane */
	Rx=Rot3D(-pi/3, "X");

	/* rotation matrix for (y,z) plane */
	Ry=Rot3D(0, "Y");

	/* rotation matrix for (x,z) plane */
	P=Rx*Ry*Rz;

	/* cumulative rotation */
	Y(X, T)=P*Y(X, T)*i;
	Y(x, t1)*S=Y(x, t2);
	t1<t2;
	print P;

	/* =W=dE=|A|*2pi(-1)âˆ‚n.r^2 -> T_>CP->Stereographic projection to->  M */
