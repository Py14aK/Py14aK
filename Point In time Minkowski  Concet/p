
/*CREATE 12 MONTH VINTAGE USING TEMPORARY ARRAYS AS STORAGE AND A FUTURE TO PAST ORDERED SET IN CONJUCTION
WITH A MOD 12 FUNCTION BASED ON SAID DESCENDING DATE TO SERVE AS A LINEAR MAP THAT FILLS ARRAY  MEMORY EVENLY.
SET NEED TO BE PREORDERED AND SOMEWHAT MONOTONIC FOR THIS TO WORK. 
WE USE THE NATURAL SAS SEQUENTIAL READING OF THE SET AS AN IMPLIED VECTOR,
WHICH MAKES OUR 1D ARRAYS IN TO 1+1 TIME ORDERED ARRAY,SIMILAR TO A MINKOWSKI SPACE TIME dS=dx+cdt 
A BY STATEMENT serves AS A SWITCH FOr resetting the 1+1 d array. */
;
DATA rgv.calibration_dataset_pd_ml_pl;
	array DEF {0:12} _TEMPORARY_;
	ARRAY MTECH{0:12} _TEMPORARY_;	/*MEMORY NODES (MUST BE TEMP FOR THEM TO RESIDE IN RAM)*/
	ARRAY MOB_MEM{0:300} _TEMPORARY_;

	DO _N_=1 BY 1 UNTIL(last.facility_key);	 /*DOW LOOP  READ DATA ONCE AND OUTPUT, saves time AND IS COOL*/
		SET rgv.CALIBRATION_DATASET END=EOF;
		ARRAY DF {0:2} DF_MIXED DF_NDD DF_12M_VINT; /*MIXED FLAG UP UNTIL 2019 OCTOBER(207), AFTER THAT NDD*/
		ARRAY TECH {0:1} DF_TECH_MIXED DF_TECH_12m_vint;
		ARRAY MOB {0:1} MOB_MANUAL MOB_MAX;				/*IF MOB FROM SOURCE IS LARGER THAN MOB FROM SOURCE ELSE EMPIRIC>SOURCE TABLE*/
		ARRAY DATE{0:1} FIRST_DEFAULT_BEGIN TECH_DEFAULT_BEGIN;		 /*IF CURE=Y THEN CHANGE TO BE REPRESENTITIVE OF EACH DATE LIKE IN LGD*/
		BY  FACILITY_KEY; /*NOTICE MONTH IS NOT IN THE BY STATEMENT THIS IS BECAUSE WE USED THE IMPLIED ORDER */
			
		if month=. then month=0;  /*in order for mod to work properly, I think its 1 observation that is fucking up the code, 
		ANY WAY WE SET MONTH=0 AS A SPECIAL VALLUE,ANALYSING IN THE CAL SECTION MIGHT GIVE US CLUES ON WHAT HAPPENED*/

			if first.facility_key then
				do;
					do i=0 to 300;
						mob_mem{i}=.;			 /*CLEAR MEMORY WITH FACILITY_KEY BEING THE SWITCH */
					end;

					DO i=0 to 12;
						mtech{i}=.;
						def{i}=.;
					end;
				end;

			/*LOAD IN TO MEMORY,USE MOD 12 AS A VINTAGE CREATOR*/

			IF MONTH < 207 THEN
				DEF{mod(month,12)}=DF{0};	/*MONTH=206 IS 2019 OCT*/
			else IF MONTH >= 207 THEN
				DEF{mod(month,12)}=DF{1};
			MTECH{MOD(MONTH,12)}=TECH{0};
					
			/*LOAD IN TO MEMORY, USE THE MOD FUNCTION TO ACHIEVE CUT-OFF/CLEARING OF MEM,a moving vintage of 12 months on acc level is stored in the temp array*/
			/*CREATED BY Antonio(py14ak) Kotsev: SEE SASNRD "LAG LEAD WITH TEMP OBJECTS AND MOVING AVERAGES"  AS WELL AS Paul Dorffmans papers on key hashes*/
			/*	see library for other examples*/
			MOB_MEM{month}=month;	 /*LOAD*/
			mob{0}=max(of mob_mem{*})-min(of mob_mem{*});  	/*THE IDEA IS TO GET THE DIFF FROM FIRST MONTH AND LAST MONTH*/;
			MOB{1}=MAX(MOB_MANUAL,MAX_MOB); /*CONSERVATIVE ESTIMATE.THOUGH MY CALCULATION IS PROBABLY MORE RELIABLE*/

			if mob{1} < 6 then
				model="APP";
			else if mob{1} >= 6 then model="BEH"; /*ADD THIS NOW  TO HELP HASH JOIN LATER(unique keys are better)*/

			IF (DF{0}>. or DF{1}>.) AND TECH{0}=. THEN
				TECH{0}=0;
			ELSE TECH{0}=TECH{0}; /* Gian's code does this logic, may change in the future 29.10.2021 */

			IF MAX(OF DEF{*})>0 THEN
				DO;
					DF{2}=1;

					IF DATE{0}=. THEN
						DATE{0}=MONTH;
					ELSE DATE{0}=DATE{0};
				END;

			/*each row a calculation on the temp array is done that determines if the acc defaulted in the last 12 months, 
								month should go from big to small to ensure looking at the future rather than the past*/
			ELSE IF MAX(OF DEF{*})=0 THEN
				DO;
					DF{2}=0;

					IF DATE{0}=. THEN
						DATE{0}=0;
					ELSE DATE{0}=DATE{0};
				END;

			IF MAX(OF MTECH{*})>0 THEN
				DO;
					TECH{1}=1;

					IF DATE{1}=. THEN
						DATE{1}=MONTH;
					ELSE DATE{1}=DATE{1};
				END;

			/*			SAME LOGIC AS DEF*/

			IF MAX(OF MTECH{*})=0 THEN
				DO;
					TECH{1}=0;

					IF DATE{1}=. THEN
						DATE{1}=0;
					ELSE DATE{1}=DATE{1};
				END;
		 
			output; /*output each row, WHEN USING DOW LOOPS OUTPUTS MUST BE EXPLICIT*/
	END;

	drop i j;

	/*TAKES LESS THAN 1 MIN FOR 14.5 MILLION AND 200 COLS*/
RUN;					
